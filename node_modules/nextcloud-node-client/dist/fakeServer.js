"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const logger_1 = __importDefault(require("./logger"));
const log = new logger_1.default();
class FakeServer {
    constructor(fakeResponses) {
        this.fakeResponses = [];
        this.fakeResponses = fakeResponses;
    }
    getFakeHttpResponse(url, requestInit, expectedHttpStatusCode, context) {
        return __awaiter(this, void 0, void 0, function* () {
            log.debug("getFakeHttpResponse");
            if (!requestInit.method) {
                requestInit.method = "UNDEFINED";
            }
            const rrEntry = this.fakeResponses.shift();
            if (!rrEntry) {
                throw new Error(`error providing fake http response. No fake response available`);
            }
            const responseInit = {
                status: rrEntry.response.status,
            };
            const response = new node_fetch_1.Response(rrEntry.response.body, responseInit);
            if (rrEntry.response.contentType) {
                response.headers.append("Content-Type", rrEntry.response.contentType);
            }
            if (rrEntry.response.contentLocation) {
                response.headers.append("Content-Location", rrEntry.response.contentLocation);
            }
            if (expectedHttpStatusCode.indexOf(response.status) === -1) {
                log.debug("getHttpResponse unexpected status response ", response.status + " " + response.statusText);
                log.debug("getHttpResponse description ", context.description);
                log.debug("getHttpResponse expected ", expectedHttpStatusCode.join(","));
                log.debug("getHttpResponse headers ", JSON.stringify(response.headers, null, 4));
                log.debug("getHttpResponse request body ", requestInit.body);
                log.debug("getHttpResponse text ", yield response.text());
                throw new Error(`HTTP response status ${response.status} not expected. Expected status: ${expectedHttpStatusCode.join(",")} - status text: ${response.statusText}`);
            }
            return response;
        });
    }
}
exports.default = FakeServer;
