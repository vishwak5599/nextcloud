"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = void 0;
// tslint:disable-next-line:no-var-requires
const HttpProxyAgent = require('http-proxy-agent');
const node_fetch_1 = __importDefault(require("node-fetch"));
const node_fetch_2 = require("node-fetch");
const error_1 = __importDefault(require("./error"));
const requestResponseLog_1 = __importDefault(require("./requestResponseLog"));
const requestResponseLogEntry_1 = __importStar(require("./requestResponseLogEntry"));
const logger_1 = __importDefault(require("./logger"));
const log = new logger_1.default();
class HttpClient {
    constructor(options) {
        log.debug("constructor");
        this.authorizationHeader = options.authorizationHeader;
        this.proxy = options.proxy;
        this.logRequestResponse = options.logRequestResponse || false;
        this.origin = options.origin || "";
    }
    getHttpResponse(url, requestInit, expectedHttpStatusCode, context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!requestInit.headers) {
                requestInit.headers = new node_fetch_2.Headers();
            }
            if (!requestInit.method) {
                requestInit.method = "UNDEFINED";
            }
            if (!context.description) {
                context.description = "";
            }
            if (this.authorizationHeader) {
                requestInit.headers.append("Authorization", this.authorizationHeader);
            }
            requestInit.headers.append("User-Agent", "nextcloud-node-client");
            // set the proxy
            if (this.proxy) {
                log.debug("proxy agent used");
                const options = {
                    host: this.proxy.host,
                    port: this.proxy.port,
                    protocol: this.proxy.protocol,
                };
                requestInit.agent = new HttpProxyAgent(options);
                if (this.proxy.proxyAuthorizationHeader) {
                    requestInit.headers.append("Proxy-Authorization", this.proxy.proxyAuthorizationHeader);
                }
            }
            log.debug("getHttpResponse request header:", requestInit.headers);
            log.debug("getHttpResponse url", url, requestInit);
            const response = yield node_fetch_1.default(url, requestInit);
            if (this.logRequestResponse) {
                const responseText = yield response.text();
                // overwrite response functions as the body uses a stearm object...
                response.text = () => __awaiter(this, void 0, void 0, function* () {
                    return responseText;
                });
                response.body.pipe = (destination, options) => {
                    destination.write(responseText);
                };
                response.json = () => __awaiter(this, void 0, void 0, function* () {
                    return JSON.parse(responseText);
                });
                response.buffer = () => __awaiter(this, void 0, void 0, function* () {
                    return Buffer.from(responseText);
                });
                let body = `<Body is ${typeof requestInit.body}>`;
                if (requestInit.body && requestInit.body instanceof Buffer) {
                    body = `<Body is Buffer ${requestInit.body.length}>`;
                }
                if (typeof requestInit.body === "string") {
                    body = requestInit.body;
                }
                const reqLogEntry = new requestResponseLogEntry_1.RequestLogEntry(url.replace(this.origin, ""), requestInit.method, context.description, body);
                const resLogEntry = new requestResponseLogEntry_1.ResponseLogEntry(response.status, yield response.text(), response.headers.get("Content-Type"), response.headers.get("Content-Location") || "");
                const rrLog = requestResponseLog_1.default.getInstance();
                yield rrLog.addEntry(new requestResponseLogEntry_1.default(reqLogEntry, resLogEntry));
            }
            const responseContentType = response.headers.get("content-type");
            if (expectedHttpStatusCode.indexOf(response.status) === -1) {
                log.debug("getHttpResponse unexpected status response " + response.status + " " + response.statusText);
                log.debug("getHttpResponse description " + context.description);
                log.debug("getHttpResponse expected " + expectedHttpStatusCode.join(","));
                log.debug("getHttpResponse headers ", JSON.stringify(response.headers, null, 4));
                log.debug("getHttpResponse request body ", requestInit.body);
                log.debug("getHttpResponse text:", yield response.text());
                throw new error_1.default(`HTTP response status ${response.status} not expected. Expected status: ${expectedHttpStatusCode.join(",")} - status text: ${response.statusText}`, "ERR_UNEXPECTED_HTTP_STATUS", {
                    expectedHttpStatusCodes: expectedHttpStatusCode,
                    responseStatus: response.status,
                    responseStatusText: response.statusText,
                });
            }
            return response;
        });
    }
}
exports.HttpClient = HttpClient;
