"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(require("util"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const readdir = util_1.default.promisify(fs_1.default.readdir);
const stat = util_1.default.promisify(fs_1.default.stat);
class FileSystemFolder {
    constructor(name) {
        this.name = name;
    }
    getName() {
        return { relative: this.name, absolute: path_1.default.resolve(this.name) };
    }
    getFileNames() {
        return __awaiter(this, void 0, void 0, function* () {
            const fileNames = [];
            for (const absoluteFileName of yield this.getFileNamesRecursively(this.name)) {
                fileNames.push({ absolute: absoluteFileName, relative: absoluteFileName.replace(path_1.default.resolve(this.getName().absolute), "").replace(/\\/g, "/") });
            }
            return (fileNames);
        });
    }
    ;
    getFileNamesRecursively(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const subdirs = yield readdir(name);
            const files = yield Promise.all(subdirs.map((subdir) => __awaiter(this, void 0, void 0, function* () {
                const res = path_1.default.resolve(name, subdir);
                return (yield stat(res)).isDirectory() ? this.getFileNamesRecursively(res) : res;
            })));
            return files.reduce((a, f) => a.concat(f), []);
        });
    }
}
exports.default = FileSystemFolder;
