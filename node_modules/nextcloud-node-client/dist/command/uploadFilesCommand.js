"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-var-requires
const debug = require("debug").debug("UploadFilesCommand");
const command_1 = __importStar(require("./command"));
const util_1 = __importDefault(require("util"));
const fs_1 = __importDefault(require("fs"));
/**
 * Command to upload a set or files from local file system to nextcloud
 */
class UploadFilesCommand extends command_1.default {
    /**
     * @param {Client} client the client
     * @param {SourceTargetFileNames[]} files the files to be uploaded
     * @param {(file: File) => void} processAfterUpload callback function to process the uploaded file
     */
    constructor(client, options) {
        super(client);
        this.files = options.files;
        this.bytesUploaded = 0;
        this.processFileAfterUpload = options.processFileAfterUpload;
    }
    /**
     * execute the command
     * @async
     * @returns {Promise<void>}
     */
    onExecute() {
        return __awaiter(this, void 0, void 0, function* () {
            this.status = command_1.CommandStatus.running;
            try {
                const readfile = util_1.default.promisify(fs_1.default.readFile);
                let countCompleted = 0;
                this.percentCompleted = 0;
                if (this.files.length === 0) {
                    this.percentCompleted = 100;
                }
                let newFile;
                for (const file of this.files) {
                    let data;
                    newFile = null;
                    try {
                        data = yield readfile(file.sourceFileName);
                        try {
                            newFile = yield this.client.createFile(file.targetFileName, data);
                            this.resultMetaData.messages.push(`${file.targetFileName}`);
                            this.bytesUploaded += data.length;
                        }
                        catch (e) {
                            this.resultMetaData.errors.push(`${file.targetFileName}: ${e.message}`);
                            debug(file.targetFileName, e);
                        }
                    }
                    catch (e) {
                        this.resultMetaData.errors.push(`${file.targetFileName}: ${e.message}`);
                    }
                    countCompleted++;
                    this.percentCompleted = Math.round(countCompleted / this.files.length * 100);
                    debug(" completed:" + this.percentCompleted + "%");
                    if (newFile && this.processFileAfterUpload) {
                        yield this.processFileAfterUpload(newFile);
                    }
                }
            }
            catch (e) {
                debug(e.message);
                this.resultMetaData.errors.push(e.message);
                this.percentCompleted = 100;
            }
            if (this.resultMetaData.errors.length > 0) {
                this.status = command_1.CommandStatus.failed;
            }
            else {
                this.status = command_1.CommandStatus.success;
            }
            debug("execute finished", this.percentCompleted, this.status);
            return;
        });
    }
    ;
    getBytesUploaded() {
        return this.bytesUploaded;
    }
}
exports.default = UploadFilesCommand;
