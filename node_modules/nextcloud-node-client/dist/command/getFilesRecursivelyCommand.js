"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-var-requires
const debug = require("debug").debug("GetFilesRecursivelyCommand");
const command_1 = __importStar(require("./command"));
/**
 * Command to get all files of a nextcloud folder recursively
 */
class GetFilesRecursivelyCommand extends command_1.default {
    /**
     * @param {Client} client the client
     * @param {SourceTargetFileNames[]} files the files to be uploaded
     * @param {(file: File) => void} processAfterUpload callback function to process the uploaded file
     */
    constructor(client, options) {
        super(client);
        this.sourceFolder = options.sourceFolder;
        this.filterFile = options.filterFile;
        this.files = [];
    }
    /**
     * execute the command
     * @async
     * @returns {Promise<void>}
     */
    onExecute() {
        return __awaiter(this, void 0, void 0, function* () {
            this.status = command_1.CommandStatus.running;
            const startTime = new Date();
            try {
                this.percentCompleted = 0;
                yield this.processFolder(this.sourceFolder, 100);
                // console.log("file count", this.files.length);
                this.resultMetaData.messages.push(`${this.files.length} files found`);
            }
            catch (e) {
                debug(e.message);
                this.resultMetaData.errors.push(e.message);
            }
            this.percentCompleted = 100;
            if (this.resultMetaData.errors.length > 0) {
                this.status = command_1.CommandStatus.failed;
            }
            else {
                this.status = command_1.CommandStatus.success;
            }
            this.resultMetaData.timeElapsed = new Date().getTime() - startTime.getTime();
            return;
        });
    }
    ;
    getFiles() {
        return this.files;
    }
    /**
     * adds files of folder and processes subordinated folders
     * @param {Folder} folder the folder to process
     * @param {number} percentagethe percentage that is finished, when the function returns
     */
    processFolder(folder, percentage) {
        return __awaiter(this, void 0, void 0, function* () {
            // tslint:disable-next-line:no-console
            // console.log(folder.name);
            const options = { filterFile: this.filterFile };
            const folderFiles = yield folder.getFiles(options);
            for (const fi of folderFiles) {
                this.files.push(fi);
            }
            const subFolders = yield folder.getSubFolders();
            if (subFolders.length === 0) {
                this.percentCompleted += percentage;
            }
            for (const subFolder of subFolders) {
                // console.log("folder", subFolder.name);
                yield this.processFolder(subFolder, percentage / subFolders.length);
            }
            return;
        });
    }
}
exports.default = GetFilesRecursivelyCommand;
