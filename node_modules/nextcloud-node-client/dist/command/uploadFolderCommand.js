"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-var-requires
const debug = require("debug").debug("UploadFolderCommand");
const client_1 = require("../client");
const command_1 = __importStar(require("./command"));
/**
 * Command to upload the contents of a folder from local file system to nextcloud recursively
 */
class UploadFolderCommand extends command_1.default {
    /**
     * @param {Client} client the client
     * @param {ISourceTargetFileNames[]} files the files to be uploaded
     * @param {(file: File) => void} processAfterUpload callback function to process the uploaded file
     */
    constructor(client, options) {
        super(client);
        this.folderName = options.folderName;
        this.processFileAfterUpload = options.processFileAfterUpload;
        if (options.getTargetFileNameBeforeUpload) {
            this.getTargetFileNameBeforeUpload = options.getTargetFileNameBeforeUpload;
        }
        else {
            this.getTargetFileNameBeforeUpload = (fileNames) => { return fileNames.targetFileName; };
        }
        this.bytesUploaded = 0;
    }
    /**
     * execute the command
     * @async
     * @returns {Promise<void>}
     */
    onExecute() {
        return __awaiter(this, void 0, void 0, function* () {
            this.status = command_1.CommandStatus.running;
            let fileNames = [];
            const fsf = new client_1.FileSystemFolder(this.folderName);
            try {
                fileNames = yield fsf.getFileNames();
            }
            catch (e) {
                this.resultMetaData.errors.push(e);
                this.status = command_1.CommandStatus.failed;
                this.percentCompleted = 100;
                this.bytesUploaded = 0;
                this.resultMetaData.timeElapsed = 0;
                return;
            }
            const files = [];
            for (const fileNameFormat of fileNames) {
                const targetFileName = this.getTargetFileNameBeforeUpload({ sourceFileName: fileNameFormat.absolute, targetFileName: fileNameFormat.relative });
                // add only files with a target name
                if (targetFileName !== "") {
                    files.push({ sourceFileName: fileNameFormat.absolute, targetFileName });
                }
            }
            const options = { files, processFileAfterUpload: this.processFileAfterUpload };
            const uc = new client_1.UploadFilesCommand(this.client, options);
            uc.execute();
            // check the processing status
            while (uc.isFinished() !== true) {
                this.status = uc.getStatus();
                this.percentCompleted = uc.getPercentCompleted();
                this.resultMetaData = uc.getResultMetaData();
                this.bytesUploaded = uc.getBytesUploaded();
                // wait one second
                yield (() => __awaiter(this, void 0, void 0, function* () { return new Promise(resolve => setTimeout(resolve, 1000)); }))();
            }
            this.status = uc.getStatus();
            this.percentCompleted = uc.getPercentCompleted();
            this.resultMetaData = uc.getResultMetaData();
            this.bytesUploaded = uc.getBytesUploaded();
            return;
        });
    }
    ;
    getBytesUploaded() {
        return this.bytesUploaded;
    }
}
exports.default = UploadFolderCommand;
