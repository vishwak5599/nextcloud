export default class ClientError extends Error {
    code: string;
    private context?;
    constructor(m: string, code: string, context?: any);
}
export declare class BaseError extends Error {
    private context?;
    constructor(m: string, context?: any);
}
/**
 * the query limit parameter must be a number larger than 0
 */
export declare class QueryLimitError extends BaseError {
}
/**
 * the query offset parameter must be a number larger than 0
 */
export declare class QueryOffsetError extends BaseError {
}
/**
 * user group already exists
 */
export declare class UserGroupAlreadyExistsError extends BaseError {
}
/**
 * user group does not exist
 */
export declare class UserGroupDoesNotExistError extends BaseError {
}
/**
 * user group cloud not be deleted
 */
export declare class UserGroupDeletionFailedError extends BaseError {
}
/**
 * user not found
 */
export declare class UserNotFoundError extends BaseError {
}
/**
 * user already exists
 */
export declare class UserAlreadyExistsError extends BaseError {
}
/**
 * error creating user
 */
export declare class UserCreateError extends BaseError {
}
/**
 * error updating user
 */
export declare class UserUpdateError extends BaseError {
}
/**
 * Error sending user welcome email
 */
export declare class UserResendWelcomeEmailError extends BaseError {
}
/**
 * the service response is invalid
 */
export declare class InvalidServiceResponseFormatError extends BaseError {
}
/**
 * the service response is invalid
 */
export declare class InsufficientPrivilegesError extends BaseError {
}
/**
 * operation failed
 */
export declare class OperationFailedError extends BaseError {
}
/**
 * the command is already executed
 */
export declare class CommandAlreadyExecutedError extends BaseError {
}
