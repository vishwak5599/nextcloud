"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandAlreadyExecutedError = exports.OperationFailedError = exports.InsufficientPrivilegesError = exports.InvalidServiceResponseFormatError = exports.UserResendWelcomeEmailError = exports.UserUpdateError = exports.UserCreateError = exports.UserAlreadyExistsError = exports.UserNotFoundError = exports.UserGroupDeletionFailedError = exports.UserGroupDoesNotExistError = exports.UserGroupAlreadyExistsError = exports.QueryOffsetError = exports.QueryLimitError = exports.BaseError = void 0;
// tslint:disable:max-classes-per-file
class ClientError extends Error {
    constructor(m, code, context) {
        super(m);
        this.code = code;
        this.context = context;
    }
}
exports.default = ClientError;
// tslint:disable-next-line:max-classes-per-file
class BaseError extends Error {
    constructor(m, context) {
        super(m);
        this.context = context;
    }
}
exports.BaseError = BaseError;
/**
 * the query limit parameter must be a number larger than 0
 */
class QueryLimitError extends BaseError {
}
exports.QueryLimitError = QueryLimitError;
;
/**
 * the query offset parameter must be a number larger than 0
 */
class QueryOffsetError extends BaseError {
}
exports.QueryOffsetError = QueryOffsetError;
;
/**
 * user group already exists
 */
class UserGroupAlreadyExistsError extends BaseError {
}
exports.UserGroupAlreadyExistsError = UserGroupAlreadyExistsError;
;
/**
 * user group does not exist
 */
class UserGroupDoesNotExistError extends BaseError {
}
exports.UserGroupDoesNotExistError = UserGroupDoesNotExistError;
;
/**
 * user group cloud not be deleted
 */
class UserGroupDeletionFailedError extends BaseError {
}
exports.UserGroupDeletionFailedError = UserGroupDeletionFailedError;
;
/**
 * user not found
 */
class UserNotFoundError extends BaseError {
}
exports.UserNotFoundError = UserNotFoundError;
;
/**
 * user already exists
 */
class UserAlreadyExistsError extends BaseError {
}
exports.UserAlreadyExistsError = UserAlreadyExistsError;
;
/**
 * error creating user
 */
class UserCreateError extends BaseError {
}
exports.UserCreateError = UserCreateError;
;
/**
 * error updating user
 */
class UserUpdateError extends BaseError {
}
exports.UserUpdateError = UserUpdateError;
;
/**
 * Error sending user welcome email
 */
class UserResendWelcomeEmailError extends BaseError {
}
exports.UserResendWelcomeEmailError = UserResendWelcomeEmailError;
;
/**
 * the service response is invalid
 */
class InvalidServiceResponseFormatError extends BaseError {
}
exports.InvalidServiceResponseFormatError = InvalidServiceResponseFormatError;
;
/**
 * the service response is invalid
 */
class InsufficientPrivilegesError extends BaseError {
}
exports.InsufficientPrivilegesError = InsufficientPrivilegesError;
;
/**
 * operation failed
 */
class OperationFailedError extends BaseError {
}
exports.OperationFailedError = OperationFailedError;
;
/**
 * the command is already executed
 */
class CommandAlreadyExecutedError extends BaseError {
}
exports.CommandAlreadyExecutedError = CommandAlreadyExecutedError;
;
